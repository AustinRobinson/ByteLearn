openapi: 3.0.3
info:
    title: ByteLearn API
    description: "Educational Short-Form Video Content."
    version: 1.0.0

servers:
    - url: http://localhost/api
      description: Local development server

paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: mysecretpassword
                password_confirmation:
                  type: string
                  format: password
                  example: mysecretpassword
      responses:
        201:
          description: User registered successfully
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: mysecretpassword
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /refresh:
    post:
      summary: Refresh access token using refresh token
      parameters:
        - name: refresh_token
          in: cookie
          required: true
          schema:
            type: string
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: The refresh token stored in the cookie
      responses:
        200:
          description: New access token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logout:
    post:
      summary: Logout user
      parameters:
        - name: refresh_token
          in: cookie
          required: true
          schema:
            type: string
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: The refresh token stored in the cookie
      responses:
        204:
          description: User logged out successfully
        401:
          description: Refresh token not found or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user:
    get:
      summary: Get authenticated user
      security:
        - bearerAuth: []
      responses:
        200:
          description: Authenticated user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "12345678-abcd-1234-abcd-1234567890ab"
                  first_name:
                    type: string
                    example: John
                  last_name:
                    type: string
                    example: Doe
                  username:
                    type: string
                    example: johndoe
                  email:
                    type: string
                    format: email
                    example: johndoe@example.com
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /videos/feed:
    get:
      summary: Get personalized video feed
      security:
        - bearerAuth: []
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            example: 0
          description: Number of items to skip
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 20
          description: Maximum number of items to return
      responses:
        200:
          description: Successfully retrieved video feed
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "12345678-abcd-1234-abcd-1234567890ab"
                        title:
                          type: string
                          example: "Learn Python in 60 Seconds"
                        description:
                          type: string
                          example: "Quick Python tutorial for beginners"
                        video_url:
                          type: string
                          example: "http://localhost/storage/videos/python-tutorial.mp4"
                        created_at:
                          type: string
                          format: date-time
                        user:
                          type: object
                          properties:
                            id:
                              type: string
                              example: "12345678-abcd-1234-abcd-1234567890ab"
                            username:
                              type: string
                              example: "techteacher"
                        tags:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                                example: "12345678-abcd-1234-abcd-1234567890ab"
                              tag:
                                type: string
                                example: "python"
                        is_liked:
                          type: boolean
                          example: false
                        has_watched:
                          type: boolean
                          example: false
                        comment_count:
                          type: integer
                          example: 5
                        matches_interests:
                          type: boolean
                          example: true
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 100
                      offset:
                        type: integer
                        example: 0
                      limit:
                        type: integer
                        example: 20
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /videos/like/{video}:
    post:
      summary: Like a video
      security:
        - bearerAuth: []
      parameters:
        - name: video
          in: path
          required: true
          schema:
            type: string
            example: "12345678-abcd-1234-abcd-1234567890ab"
          description: The video ID
      responses:
        200:
          description: Video liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Video liked successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Unlike a video
      security:
        - bearerAuth: []
      parameters:
        - name: video
          in: path
          required: true
          schema:
            type: string
            example: "12345678-abcd-1234-abcd-1234567890ab"
          description: The video ID
      responses:
        200:
          description: Video unliked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Video unliked successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /videos/comments/{video}:
    get:
      summary: Get video comments
      security:
        - bearerAuth: []
      parameters:
        - name: video
          in: path
          required: true
          schema:
            type: string
            example: "12345678-abcd-1234-abcd-1234567890ab"
          description: The video ID
      responses:
        200:
          description: Successfully retrieved comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "12345678-abcd-1234-abcd-1234567890ab"
                        text:
                          type: string
                          example: "Great tutorial!"
                        user:
                          type: object
                          properties:
                            id:
                              type: string
                              example: "12345678-abcd-1234-abcd-1234567890ab"
                            username:
                              type: string
                              example: "learner123"
                        replies:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                                example: "87654321-dcba-4321-dcba-0987654321fe"
                              text:
                                type: string
                                example: "Thanks for the feedback!"
                              user:
                                type: object
                                properties:
                                  id:
                                    type: string
                                    example: "12345678-abcd-1234-abcd-1234567890ab"
                                  username:
                                    type: string
                                    example: "techteacher"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Add a comment to video
      security:
        - bearerAuth: []
      parameters:
        - name: video
          in: path
          required: true
          schema:
            type: string
            example: "12345678-abcd-1234-abcd-1234567890ab"
          description: The video ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: "Great tutorial!"
                comment_id:
                  type: string
                  example: "12345678-abcd-1234-abcd-1234567890ab"
                  description: "Optional parent comment ID for replies"
      responses:
        201:
          description: Comment added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Comment added successfully"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "12345678-abcd-1234-abcd-1234567890ab"
                      text:
                        type: string
                        example: "Great tutorial!"
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "12345678-abcd-1234-abcd-1234567890ab"
                          username:
                            type: string
                            example: "learner123"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    /register:
        post:
            summary: Register a new user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                first_name:
                                    type: string
                                    example: John
                                last_name:
                                    type: string
                                    example: Doe
                                username:
                                    type: string
                                    example: johndoe
                                email:
                                    type: string
                                    format: email
                                    example: johndoe@example.com
                                password:
                                    type: string
                                    format: password
                                    example: mysecretpassword
                                password_confirmation:
                                    type: string
                                    format: password
                                    example: mysecretpassword
            responses:
                201:
                    description: User registered successfully
                422:
                    description: Validation error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

    /login:
        post:
            summary: Login user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                    example: johndoe@example.com
                                password:
                                    type: string
                                    format: password
                                    example: mysecretpassword
            responses:
                200:
                    description: User logged in successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    access_token:
                                        type: string
                                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                401:
                    description: Invalid credentials
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

    /refresh:
        post:
            summary: Refresh access token using refresh token
            parameters:
                - $ref: "#/components/parameters/RefreshTokenParam"
            responses:
                200:
                    description: New access token generated
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    access_token:
                                        type: string
                                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                401:
                    description: Invalid or expired refresh token
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                404:
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

    /logout:
        post:
            summary: Logout user
            parameters:
                - $ref: "#/components/parameters/RefreshTokenParam"
            responses:
                204:
                    description: User logged out successfully
                401:
                    description: Refresh token not found or invalid
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

    /user:
        get:
            summary: Get authenticated user
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Authenticated user data
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        example: "12345678-abcd-1234-abcd-1234567890ab"
                                    first_name:
                                        type: string
                                        example: John
                                    last_name:
                                        type: string
                                        example: Doe
                                    username:
                                        type: string
                                        example: johndoe
                                    email:
                                        type: string
                                        format: email
                                        example: johndoe@example.com
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

    /videos/all:
        get:
            summary: "Get all videos (testing only)"
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Returns all videos
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Returning all videos."
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Video"

    /videos/upload:
        post:
            summary: "Post a video by using a multipart form"
            security:
                - bearerAuth: []
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                video:
                                    type: string
                                    format: binary
                                    description: "Video file. Must be an .mp4 file."
                                title:
                                    type: string
                                    example: "Et est est quia nulla."
                                description:
                                    type: string
                                    example: "Aut dolorem quasi tenetur ..."

            responses:
                201:
                    description: Video uploaded
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Video uploaded successfully."
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/VideoWithTagUser"

    /videos/search/all:
        get:
            summary: "Get search results on all video fields (title, description, tags, users)"
            parameters:
                - $ref: "#/components/parameters/SearchQueryParam"
            security:
                - bearerAuth: []
            responses:
                200:
                    $ref: "#/components/responses/VideoQueryResponse"

    /videos/search/title:
        get:
            summary: "Get search results on video title field only"
            parameters:
                - $ref: "#/components/parameters/SearchQueryParam"
            security:
                - bearerAuth: []
            responses:
                200:
                    $ref: "#/components/responses/VideoQueryResponse"


    /videos/search/description:
        get:
            summary: "Get search results on video description field only"
            parameters:
                - $ref: "#/components/parameters/SearchQueryParam"
            security:
                - bearerAuth: []
            responses:
                200:
                    $ref: "#/components/responses/VideoQueryResponse"

    /videos/search/tag:
        get:
            summary: "Get search results on video tags only"
            parameters:
                - $ref: "#/components/parameters/SearchQueryParam"
            security:
                - bearerAuth: []
            responses:
                200:
                    $ref: "#/components/responses/VideoQueryResponse"

    /videos/search/user:
        get:
            summary: "Get search results on video user only"
            parameters:
                - $ref: "#/components/parameters/SearchQueryParam"
            security:
                - bearerAuth: []
            responses:
                200:
                    $ref: "#/components/responses/VideoQueryResponse"
                    

    /videos/url:
        get:
            summary: "Get the temporary URL for a given s3_key."
            parameters:
                - $ref: "#/components/parameters/S3QueryParam"
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Returns the pre-signed temp URL.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Temporary video link for 9d95637b-b586-4d54-a254-32a21fd46926/YM72qWMa7eSbNjuK4tGi733pHiicE0FyfpScCH6a.mp4"
                                    data:
                                        type: string
                                        example: "https://bytelearn-prod...Signature=4658069191ee3a7ebbbc1116188a1e13ebb84d637a9d55d700ba7f46ec932447"


components:
    parameters:
        RefreshTokenParam:
            name: refresh_token
            in: cookie
            required: true
            schema:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            description: The refresh token stored in the cookie.

        SearchQueryParam:
            name: search
            in: query
            required: true
            schema:
                type: string
                example: test
            description: The query to search on.

        S3QueryParam:
            name: s3_key
            in: query
            required: true
            schema:
                type: string
                example: "9d95637b-b586-4d54-a254-32a21fd46926/YM72qWMa7eSbNjuK4tGi733pHiicE0FyfpScCH6a.mp4"
            description: The s3_key to get the URL for.

    schemas:
        ErrorResponse:
            type: object
            properties:
                message:
                    type: string
                    example: "Invalid credentials"
                errors:
                    type: object
                    additionalProperties:
                        type: array
                        items:
                            type: string

        User:
            type: object
            properties:
                id:
                    type: string
                    example: "9d95637b-b586-4d54-a254-32a21fd46926"
                first_name:
                    type: string
                    example: "John"
                last_name:
                    type: string
                    example: "Test"
                email:
                    type: string
                    example: "john.test@example.com"
                email_verified_at:
                    type: string
                    example: null
                username:
                    type: string
                    example: "JohnTest"
                refresh_token:
                    type: string
                    example: null
                created_at:
                    type: string
                    example: "2024-11-26T19:30:47.000000Z"
                updated_at:
                    type: string
                    example: "2024-11-26T19:30:47.000000Z"

        Tag:
            type: object

        Video:
            type: object
            properties:
                id:
                    type: string
                    example: "9d8d8dca-4407-4a87-9857-9f0cf16bea9a"
                user_id:
                    type: string
                    example: "9d8d8dca-4245-4fad-86a8-7630b677ae9f"
                s3_key:
                    type: string
                    example: "8f6297b99e93c653f281ef88908b3034"
                title:
                    type: string
                    example: "Non ipsa dolorem qui."
                description:
                    type: string
                    example: "Est et aut aut ipsam nemo quisquam architecto. Natus harum neque et sed ..."
                likes:
                    type: integer
                    example: 0
                is_banned:
                    type: boolean
                    example: false
                created_at:
                    type: string
                    example: "2024-11-22T22:02:27.000000Z"
                updated_at:
                    type: string
                    example: "2024-11-22T22:02:27.000000Z"

        VideoWithTagUser:
            type: object
            properties:
                id:
                    type: string
                    example: "9d8d8dca-4407-4a87-9857-9f0cf16bea9a"
                user_id:
                    type: string
                    example: "9d8d8dca-4245-4fad-86a8-7630b677ae9f"
                s3_key:
                    type: string
                    example: "8f6297b99e93c653f281ef88908b3034"
                title:
                    type: string
                    example: "Non ipsa dolorem qui."
                description:
                    type: string
                    example: "Est et aut aut ipsam nemo quisquam architecto. Natus harum neque et sed ..."
                likes:
                    type: integer
                    example: 0
                is_banned:
                    type: boolean
                    example: false
                created_at:
                    type: string
                    example: "2024-11-22T22:02:27.000000Z"
                updated_at:
                    type: string
                    example: "2024-11-22T22:02:27.000000Z"
                tags:
                    type: array
                    items:
                        $ref: "#/components/schemas/Tag"
                user:
                    $ref: "#/components/schemas/User"

    responses:
        VideoQueryResponse:
            description: Returns all videos matching the query
            content:
                application/json:
                    schema:
                        type: array
                        items:
                        $ref: "#/components/schemas/Video"


    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
