openapi: 3.0.3
info:
  title: ByteLearn API
  description: "Educational Short-Form Video Content."
  version: 1.0.0

servers:
  - url: http://localhost/api
    description: Local development server

paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: mysecretpassword
                password_confirmation:
                  type: string
                  format: password
                  example: mysecretpassword
      responses:
        201:
          description: User registered successfully
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: mysecretpassword
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /refresh:
    post:
      summary: Refresh access token using refresh token
      parameters:
        - name: refresh_token
          in: cookie
          required: true
          schema:
            type: string
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: The refresh token stored in the cookie
      responses:
        200:
          description: New access token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logout:
    post:
      summary: Logout user
      parameters:
        - name: refresh_token
          in: cookie
          required: true
          schema:
            type: string
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: The refresh token stored in the cookie
      responses:
        204:
          description: User logged out successfully
        401:
          description: Refresh token not found or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user:
    get:
      summary: Get authenticated user
      security:
        - bearerAuth: []
      responses:
        200:
          description: Authenticated user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "12345678-abcd-1234-abcd-1234567890ab"
                  first_name:
                    type: string
                    example: John
                  last_name:
                    type: string
                    example: Doe
                  username:
                    type: string
                    example: johndoe
                  email:
                    type: string
                    format: email
                    example: johndoe@example.com
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Invalid credentials"
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
